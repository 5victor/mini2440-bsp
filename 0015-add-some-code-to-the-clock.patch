From 6d86c01480cd8d2ebc3950ae4d44bcd2881507d0 Mon Sep 17 00:00:00 2001
From: victor <vic7tor@gmail.com>
Date: Sat, 23 Jul 2011 16:27:20 +0800
Subject: [PATCH 15/36] add some code to the clock

---
 arch/arm/mach-s3c2440x/clock.c                    |  202 +++++++++++++++++++++
 arch/arm/mach-s3c2440x/include/mach/clock.h       |   15 ++-
 arch/arm/mach-s3c2440x/include/mach/regs-clk-pm.h |   12 ++
 arch/arm/mach-s3c2440x/mach-mini2440.c            |    9 +-
 4 files changed, 235 insertions(+), 3 deletions(-)
 create mode 100644 arch/arm/mach-s3c2440x/include/mach/regs-clk-pm.h

diff --git a/arch/arm/mach-s3c2440x/clock.c b/arch/arm/mach-s3c2440x/clock.c
index 7c0872c..4a9215b 100644
--- a/arch/arm/mach-s3c2440x/clock.c
+++ b/arch/arm/mach-s3c2440x/clock.c
@@ -1,3 +1,205 @@
 #include <mach/clock.h>
+#include <mach/hardware.h>
+#include <mach/regs-clk-pm.h>
+#include <linux/list.h>
+#include <linux/kernel.h>
 
+static struct list_head clks = LIST_HEAD_INIT(clks);
 
+void clk_add(struct clk *clk)
+{
+	list_add_tail(&clk->node, &clks);
+}
+
+struct clk *clk_get(struct device *dev, const char *id)
+{
+	struct list_head *ptr;
+	struct clk *entry;
+
+	list_for_each(ptr, &clks) {
+		entry = list_entry(ptr, struct clk, node);
+		if (node->dev == dev && !(strcmp(node->name, id))) {
+			return entry;
+		}
+	}
+
+	return NULL;
+}
+
+int clk_enable(struct clk *clk)
+{
+	if (clk->parent) {
+		clk_enable(clk->parent);
+	}
+
+	if (clk->ops->enable) {
+		clk->ops->enable(clk);
+	}
+
+	return 0;
+}
+
+void clk_disable(struct clk *clk)
+{
+	if (clk->ops->disable) {
+		clk->ops->disable(clk);
+	}
+}
+
+unsigned long clk_get_rate(struct clk *clk)
+{
+	if (clk->ops->get_rate) {
+		return clk->ops->get_rate(clk);
+	} else {
+		return clk->rate;
+	}
+}
+
+void clk_put(struct clk *clk)
+{
+	return ;
+}
+
+long clk_round_rate(struct clk *clk, unsigned long rate)
+{
+	return -EIO;
+}
+
+int clk_set_rate(struct clk *clk, unsigned long rate)
+{
+	clk->rate = rate;
+	if (clk->set_rate) {
+		clk->set_rate(clk, rate);
+	}
+	return 0;
+}
+
+int clk_set_parent(struct clk *clk, struct clk *parent)
+{
+	clk->parent = parent;
+	return 0;
+}
+
+struct clk *clk_get_parent(sturct clk *clk)
+{
+	return clk->parent;
+}
+
+struct clk *clk_get_sys(const char *dev_id, const char *con_id)
+{
+	return NULL;
+}
+
+int clk_add_alias(const char *alias, const char *alias_dev_name, char *id,
+			struct device *dev)
+{
+	return -EIO;
+}
+
+static unsigned long get_mpll()
+{
+	unsigned int mdiv, pdiv, sdiv;
+	unsigned int tmp;
+	tmp = ioread32(CLK_PM_VA + MPLLCON);
+	mdiv = (tmp >> 12) & 0xFF;
+	pdiv = (tmp >> 4) & 0x3F;
+	sdiv = (tmp >> 2) & 0x3;
+	mdiv += 8;
+	pdiv += 2;
+	tmp = (2 * mdiv * CLOCK_TICK_RATE) / (pdiv * 2^sdiv);
+	return tmp;
+}
+
+static unsigned long fclk_get_rate(struct clk *c)
+{
+	return get_mpll();
+}
+
+static unsigned long hclk_get_rate(struct clk *c)
+{
+	unsigned int hdivn;
+	unsigned int tmp = ioread8(CLK_PM_VA + CLKDIVN);
+	unsigned int camdivn = ioread32(CLK_PM_VA + CAMDIVN);
+	hdivn = (tmp >> 1) & 0x3;
+	tmp = get_mpll();
+	switch(hdivn) {
+	case 0:
+		break;
+	case 1:
+		tmp /= 2;
+		break;
+	case 2:
+		if (camdivn & (1 << 9)) {
+			tmp /= 8;
+		} else {
+			tmp /= 4;
+		}
+		break;
+	case 3:
+		if (camdivn & (1 << 8)) {
+			tmp /= 6;
+		} else {
+			tmp /= 3;
+		}
+		break;
+	default:
+	}
+
+	return tmp;
+}
+
+static unsigned long pclk_get_rate(struct clk *c)
+{
+	int tmp;
+	int pdivn = ioread8(CLK_PM_VA + CLKDIVN);
+	pdivn &= 0x1;
+	tmp = clk_get_rate(&hclk);
+	return pdivn?tmp/2:tmp
+}
+
+static int fclk_enable(struct clk *c)
+{
+	unsigned int mpll;
+	unsigned int clkdivn;
+	mpll = (0x7F << 12) | (0x2 << 4) | 0x1;
+	iowrite32(mpll, CLK_PM_VA + MPLLCON);
+	clkdivn = (1 << 1) | 1;
+	iowrite32(clkdivn, CLK_PM_VA + CLKDIVN);
+
+	asm("XXX");
+}
+
+static struct clk fclk = {
+	.name = "fclk",
+	.index = 0,
+	.ops = {
+		.get_rate = fclk_get_rate,
+		.enable	= fclk_enable,
+	},
+
+};
+
+static struct clk hclk = {
+	.name = "hclk",
+	.index = 0,
+	.ops = {
+		.get_rate = hclk_get_rate,
+	},
+};
+
+static struct clk pclk = {
+	.name = "pclk",
+	.index = 0,
+	.ops = {
+		.get_rate = pclk_get_rate,
+	},
+};
+
+void s3c2440x_clock_init(void)
+{
+	early_printk("s3c2440x_clock_init\n");
+	clk_add(&fclk);
+	clk_add(&hclk);
+	clk_add(&pclk);
+	clk_enable(fclk);
+}
diff --git a/arch/arm/mach-s3c2440x/include/mach/clock.h b/arch/arm/mach-s3c2440x/include/mach/clock.h
index 51d9911..684e863 100644
--- a/arch/arm/mach-s3c2440x/include/mach/clock.h
+++ b/arch/arm/mach-s3c2440x/include/mach/clock.h
@@ -2,6 +2,12 @@
 #define __ASM_ARCH_CLOCK_H
 
 #include <linux/clk.h>
+
+/*
+ * base on the CLKCON register use clk::index to identify which device's clock
+ * to be enable or disable, which will have the common enable, disable function. if the index less than 2, it will have it private enable disable function such as fclk, pclk
+ */
+
 struct clk_ops {
 	int 	(*set_rate)(struct clk *c, unsigned long rate);
 	unsigned long (*get_rate)(struct clk *c);
@@ -10,14 +16,19 @@ struct clk_ops {
 	int	(*disable)(struct clk *c);
 };
 
+
+
 struct clk {
 	struct list_head	node;
 	struct clk		*parent;
 	const char		*name;
 	unsigned long		rate;
-	struct	clk_ops		*ops;
+	struct	clk_ops		ops;
+	int			index;
+	struct device		*dev;
 };
 
-
+void clk_add(struct clk *clk);
+void s3c2440x_clock_init(void);
 
 #endif
diff --git a/arch/arm/mach-s3c2440x/include/mach/regs-clk-pm.h b/arch/arm/mach-s3c2440x/include/mach/regs-clk-pm.h
new file mode 100644
index 0000000..614252f
--- /dev/null
+++ b/arch/arm/mach-s3c2440x/include/mach/regs-clk-pm.h
@@ -0,0 +1,12 @@
+#ifndef __ASM_ARCH_CLK_PM_H
+#define __ASM_ARCH_CLK_PM_H
+
+#define LOCKTIME	0x0
+#define MPLLCON		0x4
+#define UPLLCON		0x8
+#define CLKCON		0xC
+#define CLKSLOW		0x10
+#define CLKDIVN		0x14
+#define CAMDIVN		0x18
+
+#endif
diff --git a/arch/arm/mach-s3c2440x/mach-mini2440.c b/arch/arm/mach-s3c2440x/mach-mini2440.c
index 639e007..829c726 100644
--- a/arch/arm/mach-s3c2440x/mach-mini2440.c
+++ b/arch/arm/mach-s3c2440x/mach-mini2440.c
@@ -3,14 +3,21 @@
 #include <asm/mach-types.h>
 #include <mach/timex.h>
 #include <mach/irqs.h>
+#include <mach/clock.h>
 
 void mini2440_init_machine(void)
 {
 
 }
 
+void mini2440_init_map(void)
+{
+	s3c2440x_init_map();
+	s3c2440x_clock_init();
+}
+
 MACHINE_START(MINI2440, "mini2440")
-	.map_io = s3c2440x_map_io,
+	.map_io = mini2440_init_map,
 	.timer = &s3c2440x_timer,
 	.init_irq = s3c2440x_init_irq,
 	.init_machine = mini2440_init_machine,
-- 
1.7.1


From 831bf6780954ed38c58b4a3f10795756bff972a1 Mon Sep 17 00:00:00 2001
From: victor <vic7tor@gmail.com>
Date: Tue, 9 Aug 2011 13:02:14 +0800
Subject: [PATCH 31/36] mfrc522 and dm9000

---
 arch/arm/Kconfig               |    1 +
 drivers/misc/mfrc522/mfrc522.c |    3 +
 drivers/misc/mfrc522/mfrc522.h |   58 +++++++++++++++++
 drivers/net/dm9000e.c          |  133 ++++++++++++++++++++++++++++++++++++++--
 4 files changed, 190 insertions(+), 5 deletions(-)
 create mode 100644 drivers/misc/mfrc522/mfrc522.h

diff --git a/arch/arm/Kconfig b/arch/arm/Kconfig
index 261602a..78d16bf 100644
--- a/arch/arm/Kconfig
+++ b/arch/arm/Kconfig
@@ -213,6 +213,7 @@ config ARCH_S3C2440X
 	bool "S3C2440 machine porting by victor"
 	select CPU_ARM920T
 	select LEDS
+	select ARCH_REQUIRE_GPIOLIB
 	help
 	  This enable suport for s3c2440 machine, it porting by victor
 
diff --git a/drivers/misc/mfrc522/mfrc522.c b/drivers/misc/mfrc522/mfrc522.c
index e69de29..8d5ae0f 100644
--- a/drivers/misc/mfrc522/mfrc522.c
+++ b/drivers/misc/mfrc522/mfrc522.c
@@ -0,0 +1,3 @@
+#include <linux/kernel.h>
+#include <linux/slab.h>
+#include "mfrc522.h"
diff --git a/drivers/misc/mfrc522/mfrc522.h b/drivers/misc/mfrc522/mfrc522.h
new file mode 100644
index 0000000..be5d845
--- /dev/null
+++ b/drivers/misc/mfrc522/mfrc522.h
@@ -0,0 +1,58 @@
+#ifndef __MFRC522_H
+#define __MFRC522_H
+
+enum {
+	CommandReg	= 0x01,
+	ComIEnReg	= 0x02,
+	DivIEnReg	= 0x03,
+	ComIrqReg	= 0x04,
+	DivIrqReg	= 0x05,
+	ErrorReg	= 0x06,
+	Status1Reg	= 0x07,
+	Status2Reg	= 0x08,
+	FIFODataReg	= 0x09,
+	FIFOLevelReg	= 0x0A,
+	WaterLevelReg	= 0x0B,
+	ControlReg	= 0x0C,
+	BitFramingReg	= 0x0D,
+	CollReg		= 0x0E,
+
+	ModeReg		= 0x11,
+	TxModeReg	= 0x12,
+	RXModeReg	= 0x13,
+	TxControlReg	= 0x14,
+	TxASKReg	= 0x15,
+	TxSelReg	= 0x16,
+	RxSelReg	= 0x17,
+	RxThresholdReg	= 0x18,
+	DemodReg	= 0x19,
+	MfTxReg		= 0x1C,
+	MfRxreg		= 0x1D,
+	SerialSpeedReg	= 0x1F,
+
+	CRCResultReg	= 0x21,
+	ModWidthReg	= 0x24,
+	RFCfgReg	= 0x26,
+	GsNReg		= 0x27,
+	CWGsPReg	= 0x28,
+	ModGsPReg	= 0x29,
+	TModeReg	= 0x2A,
+	TPrescalerReg	= 0x2B,
+	TReloadReg	= 0x2C,
+	TCounterValReg	= 0x2E,
+
+	TestSel1Reg	= 0x31,
+	TestSel2Reg	= 0x32,
+	TestPinEnReg	= 0x33,
+	TestPinValueReg = 0x34,
+	TestBusReg	= 0x35,
+	AutoTestReg	= 0x36,
+	VersionReg	= 0x37,
+	AnalogTestReg	= 0x38,
+	TestDAC1Reg	= 0x39,
+	TestDAC2Reg	= 0x3A,
+	TestADCReg	= 0x3B,
+};
+
+
+#endif
diff --git a/drivers/net/dm9000e.c b/drivers/net/dm9000e.c
index 303807c..dbb26f4 100644
--- a/drivers/net/dm9000e.c
+++ b/drivers/net/dm9000e.c
@@ -22,11 +22,17 @@
 struct dm9000_config {
 	
 };
+
+enum int_status { INT_RX = (1 << 1), INT_TX = (1 << 2)};
+
 struct dm9000e_info {
 	spinlock_t lock;
 	int irq;
 	void *mem_reg;
 	void *mem_data;
+	enum int_status int_stauts;
+	struct sk_buff *skb;
+	
 };
 
 static struct dm9000e_info *dm9000e_info;
@@ -45,14 +51,15 @@ static void write_data(unsigned int data, int reg)
 
 static void dm9000e_reset(void)
 {
+	unsigned int ncr;
 	write_data(DM9000_NCR, 0x1);
 	udelay(20);
 	write_data(DM9000_NCR, 0x1);
 	udelay(20);
-	while (1) {
-		if (!(read_data(DM9000_NCR) & 0x1))
-			break;
-	}
+	ncr = read_data(DM9000_NCR);
+	ncr &= ~0x1;
+	write_data(ncr, DM9000_NCR);
+	
 }
 
 static void dm9000e_set_mac_addr(struct net_device *dev)
@@ -63,6 +70,51 @@ static void dm9000e_set_mac_addr(struct net_device *dev)
 	}
 }
 
+static void dm9000e_enable(struct net_device *dev)
+{
+	/*init step from dm9000 app note*/
+	struct dm9000e_info *info = netdev_priv(dev);
+
+	dm9000e_reset();
+	
+	write_data(0x01, DM9000_GPCR);
+	write_data(0x00, DM9000_GPR);
+
+	unsigned int reg;
+	reg = read_data(DM9000_NCR);
+	reg &= ~((1 << 7) | (3 << 1));
+	write_data(reg, DM9000_NCR);
+
+	reg = read_data(DM9000_NSR);
+	
+	dm9000e_set_mac_addr(dev);
+
+	reg = (1 << 7) | (1 << 1) | (1 << 0);
+	write_data(reg, DM9000_IMR);
+	
+	reg = read_data(DM9000_RCR);
+	reg |= 1;
+	write_data(reg, DM9000_RCR);
+	info->int_stauts = 0;
+}
+
+static void dm9000e_disable()
+{
+	unsigned int reg;
+	reg = read_data(DM9000_IMR);
+	reg &= ~((1 << 1) | (1 << 0));
+	write_data(reg, DM9000_IMR);
+	
+	reg = read_data(DM9000_RCR);
+	reg &= ~1;
+	write_data(DM9000_RCR);
+}
+
+static void dm9000e_rx(struct net_device *dev)
+{
+
+}
+
 static int dm9000e_ndo_init(struct net_device *dev)
 {
 	struct dm9000e_info *info = netdev_priv(dev);
@@ -87,30 +139,101 @@ static int dm9000e_ndo_init(struct net_device *dev)
 
 static int dm9000e_ndo_open(struct net_device *dev)
 {
-	
+	struct dm9000e_info *info = netdev_priv(dev);
+	dm9000e_enable(dev);
+	enable_irq(info->irq);
+
+	netif_start_queue(dev);
+	return 0;
 }
 
 static int dm9000e_ndo_stop(struct net_device *dev)
 {
+	struct dm9000e_info *info = netdev_priv(dev);
+	dm9000e_disable();
+	disable_irq(info->irq);
 
+	netif_stop_queue(dev);
+	return 0;
 }
 
 static netdev_tx_t dm9000e_ndo_start_xmit(struct sk_buff *skb,
 					struct net_device *dev)
 {
+	struct dm9000e_info *info = netdev_priv(dev);
+	unsigned char *data, shortpkt[ETH_ZLEN];
+	int len;
+	int i;
+
+	if (skb->len < ETH_ZLEN) {
+		memset(shortpkt, 0, ETH_ZLEN);
+		memcpy(shortpkt, skb->data, skb->len);
+		len = ETH_ZLEN;
+		data = shortpkt;
+	} else {
+		len = skb->len;
+		data = skb->data;
+	}
+	
+	dev->trans_start = jiffies;
+	info->skb = skb;
+	
+	for (i = 0; i < len; i++) {
+		write_data(data[i], DM9000_MWCMD);
+	}
+
+	write_data(len & 0xFF, DM9000_TXPLL);
+	write_data((len >> 8) & 0xFF, DM9000_TXPLH);
+
+	int reg = read_data(DM9000_TCR);
+	reg |= 0x1;
+	write_data(reg, DM9000_TCR);
+
+	netif_stop_queue(dev);
+
+	return 0;
+
 
 }
 
+static void handle_irq(struct net_device *dev)
+{
+	struct dm9000e_info *info = netdev_priv(dev);
+	if (info->int_status & INT_TX) {
+		dev_kfree_skb(info->skb);
+		netif_wake_queue(dev);
+	} else if (info->int_status & INT_RX) {
+		dm9000e_rx(dev);
+	}
+}
+
 static struct net_device_ops dm9000e_ops = {
 	.ndo_init = dm9000e_ndo_init,
 	.ndo_open = dm9000e_ndo_open,
 	.ndo_stop = dm9000e_ndo_stop,
 	.ndo_start_xmit = dm9000e_ndo_start_xmit,
+	.ndo_tx_timeout = ,
+	.ndo_get_stats = ,
 	.ndo_set_mac_address = eth_mac_addr,
 };
 
+
+
 static irqreturn_t dm9000e_irq_handler(int irq, void *dev_id)
 {
+	struct dm9000e_info *info = netdev_priv(dev_id);
+	unsigned int reg = read_data(DM9000_ISR);
+	if (reg & 0x1) {
+		info->int_stauts |= INT_RX;
+		reg |= 0x1;
+	} else if (reg & (1 << 1)) {
+		info->int_status |= INT_TX;
+		reg |= 1 << 1;
+	}
+	write_data(reg, DM9000_ISR);
+
+	handle_irq(dev_id);
+
 	return IRQ_HANDLED;
 }
 
-- 
1.7.1

